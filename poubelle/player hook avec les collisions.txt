
int is_wall(t_data *data, t_point *point)
{
	return (data->map[(int)(point->y / SIZE_BOX)][(int)(point->x / SIZE_BOX)] == '1');
}

void	player_hook(void *param)
{
	t_point	box[4];
	t_data	*data;

	data = param;
	box[0].x = data->position.x - SIZE_PLAYER_HALF;
	box[0].y = data->position.y - SIZE_PLAYER_HALF;
	box[1].x = box[0].x + SIZE_PLAYER;
	box[1].y = box[0].y;
	box[2].x = box[0].x;
	box[2].y = box[0].y + SIZE_PLAYER;
	box[3].x = box[0].x + SIZE_PLAYER;
	box[3].y = box[0].y + SIZE_PLAYER;
	if (mlx_is_key_down(data->mlx, MLX_KEY_S)) // down
	{
		box[2].y += STEP;
		box[3].y += STEP;
		if (is_wall(data, &box[2]) || is_wall(data, &box[3]))
			return ;
		data->player->instances[0].y += STEP;
		data->position.y += STEP;
	}
	if (mlx_is_key_down(data->mlx, MLX_KEY_W)) // up
	{
		box[0].y -= STEP;
		box[1].y -= STEP;
		if (is_wall(data, &box[0]) || is_wall(data, &box[1]))
			return ;
		data->player->instances[0].y -= STEP;
		data->position.y -= STEP;
	}
	if (mlx_is_key_down(data->mlx, MLX_KEY_A)) // left
	{
		box[0].x -= STEP;
		box[2].x -= STEP;
		if (is_wall(data, &box[0]) || is_wall(data, &box[2]))
			return ;
		data->player->instances[0].x -= STEP;
		data->position.x -= STEP;
	}
	if (mlx_is_key_down(data->mlx, MLX_KEY_D)) // right
	{
		box[1].x += STEP;
		box[3].x += STEP;
		if (is_wall(data, &box[1]) || is_wall(data, &box[3]))
			return ;
		data->player->instances[0].x += STEP;
		data->position.x += STEP;
	}
}
